#!/usr/local/bin/python

import os
import platform
import sys
import pickle
import datetime
import m2secret


SYSTEM = platform.system()
KEY = "1234567890123456"

if SYSTEM == 'Linux':
  # check to see if xclip exists
  if os.system('which xclip') == 0:
    method = 'xclip'

  # check to see if xsel exists
  elif os.system('which xsel') == 0:
    method = 'xsel'
  
  else:
    try:
      import gtk
      method = 'gtk'
    except ImportError:
      # oops, you don't have any requirements
      # Linux. Having choices can be a bitch sometimes
      sys.exit('You need either: xclip (linux), xsel (linux) or pygtk (PyPI) installed')

elif SYSTEM == 'Darwin':
  method = 'OSX'


def xclipMethod(password):
  f = os.popen('xclip -selection c', 'w')
  f.write(password)
  f.close()


def xselMethod(password):
  f = os.popen('xsel -i', 'w')
  f.write(password)
  f.close()


def gtkMethod(password):
  f = gtk.Clipboard()
  f.set_text(password)
  f.store()

def osXMethod(password):
  f = os.popen('pbcopy', 'w')
  f.write(password)
  f.close()


methodsLoopkup = {
  'OSX': osXMethod,
  'xclip': xclipMethod,
  'xsel': xselMethod,
  'gtk': gtkMethod
}


class Data(object):
  def __init__(self, path):
    self.path = path
    try:
      self.data = pickle.load(open(self.path))
    except Exception, e:
      self.data = {}

  def set(self, key, value):
    self.data[key] = value
    self.save()

  def get(self, key):
    return self.data.get(key)


  def remove(self, key):
    if key in self.data:
      del self.data[key]
    self.save()

  def save(self):
    pickle.dump(self.data, open(self.path, 'w'))

class Once(object):
  def __init__(self, methods=methodsLoopkup, method=method):
    self.data = Data(os.path.join(os.path.expanduser("~"), ".once"))
    self.copyToClipboard = methods[method]

  def run(self):
    if len(sys.argv) < 2:
      self.usage()
    command = sys.argv[1]
    if command == "set" and len(sys.argv) == 3:
      self.set(sys.argv[2])
    elif command == "get":
      self.get()
    else:
      self.usage()

  def set(self, password):
    print "Setting password to %s" % (password)

    secret = m2secret.Secret()
    secret.encrypt(password, KEY)
    data = secret.serialize()

    self.data.set("password", data)
    self.data.remove("last_get")

  def get(self):
    data = self.data.get("password")
    now = datetime.datetime.now()

    if not data:
      print "Password not set!"
      self.usage()

    # Check date if it is already today
    last_get = self.data.get("last_get")
    format = "%Y-%m-%d"
    if last_get and (now - last_get < datetime.timedelta(hours=24)):
      print "You already asked for your password once."
      return

    # Decode
    secret = m2secret.Secret()
    secret.deserialize(data)
    password = secret.decrypt(KEY)

    self.copyToClipboard(password)
    print "Password has been copied to clipboard"

    # Set the new date if we're cool
    self.data.set("last_get", now)
    sys.exit(0)

  def usage(self):
    print "Usage: once get"
    print "       once set <password>"
    sys.exit(0)

once = Once()
once.run()






# f = open(path, 'w')